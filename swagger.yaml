swagger: "2.0"

info:
  title: "Digital Publishing Image API"
  description: "Provides read and write capabilities for image metadata"
  version: "1.0.0"
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"

basePath: "/v1"

schemes:
  - http

tags:
  - name: "image"

paths:

  /images:
    get:
      tags:
        - "image"
      summary: "Get images filtered by collection id"
      description: "Returns a list of images metadata filtered by an optional query parameter defining the collection ID"
      parameters:
        - $ref: '#/parameters/collection_id'
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      responses:
        200:
          description: "A json object containing a list of images"
          schema:
            $ref: '#/definitions/Images'
        400:
          description: "Invalid request"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to view images metadata"
        500:
          $ref: '#/responses/InternalError'
    post:
      tags:
        - "image"
      summary: "Create a new image metadata entry"
      description: "Creates a new image metadata entry corresponding to the provided body in this request. A new ID will be generated for the image, and it will be set to `created` state."
      parameters:
        - $ref: '#/parameters/new_image'
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      responses:
        201:
          description: "The image metadata was correctly created and a json object containing the new image information is returned. The new image will be in 'created' state and its id will be newly generated."
          schema:
            $ref: '#/definitions/Image'
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * collection id was incorrect
              * malformed body
              * provided image had an invalid parameter
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to create images metadata"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}:
    get:
      tags:
        - "image"
      summary: "Get an image metadata by its id"
      description: "Returns an image metadata whose id matches the id provided as path parameter"
      parameters:
        - $ref: '#/parameters/image_id'
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      responses:
        200:
          description: "A json with the requested image metadata"
          schema:
            $ref: '#/definitions/Image'
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to view image metadata"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
    put:
      tags:
        - "image"
      summary: "Update an image metadata entry"
      description: "Updates an existing image metadata entry whose id matches the id provided as path parameter. Only the provided fields will be used to overwrite an existing image, creating them if they did not already exist, and not overwriting any field that is not provided."
      parameters:
        - $ref: '#/parameters/image_id'
        - $ref: '#/parameters/image'
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      responses:
        200:
          description: "A json with the requested image metadata"
          schema:
            $ref: '#/definitions/Image'
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * image id in body, if provided, did not match the path parameter
              * malformed body
              * provided image had an invalid parameter
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to update image or cannot be updated because the state transition is not allowed"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}/downloads:
    get:
      tags:
        - "image"
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      parameters:
        - $ref: '#/parameters/image_id'
      responses:
        200:
          description: "Successfully got download variants."
          schema:
            $ref: '#/definitions/ImageDownloads'
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to view images metadata"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
    post:
      tags:
        - "image"
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      parameters:
        - $ref: '#/parameters/image_id'
        - $ref: '#/parameters/new_image_download'
      responses:
        201:
          description: "Successfully created download variant."
          schema:
            $ref: '#/definitions/ImageDownload'
        400:
          description: "Invalid request"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to create download variants"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}/downloads/{variant}:
    get:
      tags:
        - "image"
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      parameters:
        - $ref: '#/parameters/image_id'
        - $ref: '#/parameters/variant'
      responses:
        200:
          description: "Successfully got download variant."
          schema:
            $ref: '#/definitions/ImageDownload'
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to view images metadata"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
    put:
      tags:
        - "image"
      summary: "Update an image download variant"
      description: "Update the image download fields for the provided variant of the provided image."
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      parameters:
        - $ref: '#/parameters/image_id'
        - $ref: '#/parameters/variant'
        - $ref: '#/parameters/image_download'
      responses:
        200:
          description: "Successfully updated download variant"
          schema:
            $ref: '#/definitions/ImageDownload'
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * malformed body
              * provided download variant had an invalid parameter
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to update image download variant or cannot be updated because the state of the image does not allow it to be updated"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}/publish:
    post:
      tags:
        - "image"
      summary: "Publish an image"
      description: "Requests an image publishing via the static file publisher, which puts the S3 objects for this image to the static bucket. This call sets the image state to 'publishing'."
      parameters:
        - $ref: '#/parameters/image_id'
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
        - ServiceAPIKey: []
      responses:
        200:
          description: "The image publishing was successfully requested to Static file publisher."
        400:
          description: "Invalid request, image id was incorrect"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to publish image or it is in wrong state to be published"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

responses:

  InternalError:
    description: "Failed to process the request due to an internal error"

  NotFound:
    description: "Requested item cannot be found"

  InvalidRequestError:
    description: "Failed to process the request due to invalid request"

  Unauthenticated:
    description: "User or service is not authenticated"

definitions:

  Images:
    description: "A list of images"
    type: object
    properties:
      count:
        description: "The number of images returned"
        readOnly: true
        type: integer
        example: 1
      items:
        type: array
        items:
          $ref: '#/definitions/Image'
      limit:
        description: "The number of images requested"
        type: integer
      offset:
        description: "The first row of images to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the limit parameter"
        type: integer
      total_count:
        description: "The total number of images"
        readOnly: true
        type: integer
        example: 1

  NewImage:
    type: object
    description: "New Image metadata model, used to create new images. The image ID will be created by image API, and the state will be set to 'created' at creation time."
    required:
      - "collection_id"
    properties:
      state:
        type: string
        enum:
          - created
        description: "The state of the image"
        example: "created"
      collection_id:
        type: string
        description: "Collection unique identifier corresponding to this image"
        example: "5557dcd9-bf58-4a67-94f7-2343569834cc"
      filename:
        type: string
        description: "Image's file name. According to SEO recommendations, the name should not be longer than 5 words. And it should not include extension because multiple extensions for the same image might be available as download variants."
        example: "image-name"
        maxLength: 40
      license:
        type: object
        description: "License that defines the third party permissions for this image"
        properties:
          title:
            type: string
            description: "Title of the license"
            example: "Open Government Licence v3.0"
          href:
            type: string
            description: "Link to the license content"
            example: "https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
      type:
        type: string
        description: "Type of image, which might define a set of possible formats and variants or resolutions that will be generated by the image importer."
        example: "chart"

  ImageUpload:
    type: object
    description: "Original file upload in the upload bucket"
    properties:
      path:
        type: string
        description: "S3 object key (without bucket name) where the originally uploaded image is stored"
        example: "images/025a789c-533f-4ecf-a83b-65412b96b2b7/image-name.png"

  Image:
    type: object
    description: "Existing Image metadata model"
    properties:
      id:
        type: string
        description: "Image metadata unique identifier"
        example: "042e216a-7822-4fa0-a3d6-e3f5248ffc35"
      collection_id:
        type: string
        description: "Collection unique identifier corresponding to this image"
        example: "5557dcd9-bf58-4a67-94f7-2343569834cc"
      state:
        type: string
        enum:
          - created
          - uploaded
          - importing
          - imported
          - published
          - completed
          - deleted
          - failed_import
          - failed_publish
        description: "The state of the image"
        example: "published"
      filename:
        type: string
        description: "Image's file name. According to SEO recommendations, the name should not be longer than 5 words. And it should not include extension because multiple extensions for the same image might be available as download variants."
        example: "image-name"
        maxLength: 40
      license:
        type: object
        description: "License that defines the third party permissions for this image"
        properties:
          title:
            type: string
            description: "Title of the license"
            example: "Open Government Licence v3.0"
          href:
            type: string
            description: "Link to the license content"
            example: "https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
      links:
        $ref: '#/definitions/ImageLinks'
      upload:
        $ref: '#/definitions/ImageUpload'
      type:
        type: string
        description: "Type of image, which might define a set of possible formats and variants or resolutions."
        example: "chart"

  ImageLinks:
    type: object
    properties:
      self:
        type: string
      downloads:
        type: string
        example: "https://localhost:100000/images/042e216a-7822-4fa0-a3d6-e3f5248ffc35/downloads"

  ImageDownloads:
    description: "A list of image download variants"
    type: object
    properties:
      count:
        description: "The number of image downloads returned"
        readOnly: true
        type: integer
        example: 1
      items:
        type: array
        items:
          $ref: '#/definitions/ImageDownload'
      limit:
        description: "The number of image downloads requested"
        type: integer
      offset:
        description: "The first row of image downloads to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the limit parameter"
        type: integer
      total_count:
        description: "The total number of image downloads"
        readOnly: true
        type: integer
        example: 1

  ImageDownload:
    type: object
    description: "Download information for a particular image variant and resolution"
    properties:
      id:
        type: string
        description: "the variant"
        example: "original"
      height:
        type: integer
        description: "Image height, in number of pixels"
        example: 1080
      href:
        type: string
        description: "Full URL pointing to the image in download service"
        example: "http://download.ons.gov.uk/images/042e216a-7822-4fa0-a3d6-e3f5248ffc35/image-name.png"
      palette:
        type: string
        description: "Colour palette of the variant"
        example: "bw"
      private:
        type: string
        description: "S3 Private bucket name"
        example: "my-private-bucket"
      public:
        type: boolean
        description: "Determines if this image variant is public (i.e. it can be accessed under static.ons.gov.uk)"
        example: true
      size:
        type: integer
        description: "File size in number of bytes"
        example: 1024000
      type:
        type: string
        description: "Type of download corresponding to this variant"
        example: "png"
      width:
        type: integer
        description: "Image width, in number of pixels"
        example: 1920
      links:
        type: object
        properties:
          self:
            type: string
          image:
            type: string
            example: "http://localhost:10000/images/042e216a-7822-4fa0-a3d6-e3f5248ffc35"
      state:
        type: string
        description: "The state of this download variant. The high level image will change its state to imported only when all variants are in imported state."
        enum:
          - pending
          - importing
          - imported
          - published
          - completed
          - failed-import
          - failed-publish
        example: "published"
      error:
        type: string
        description: "Any error information, if there was an error with this image variant"
        example: "import process failed"
      import_started:
        type: string
        description: "Timestamp representation for the importing process start, formatted according to RFC3339"
        example: "2020-04-26T08:05:52Z"
      import_completed:
        type: string
        description: "Timestamp representation for the importing process completion, formatted according to RFC3339"
        example: "2020-04-26T08:07:32+00:00"
      publish_started:
        type: string
        description: "Timestamp representation for the publishing process start, formatted according to RFC3339"
        example: "2020-04-26T09:51:03-00:00"
      publish_completed:
        type: string
        description: "Timestamp representation for the publishing process completion, formatted according to RFC3339"
        example: "2020-04-26T10:01:28Z"

  NewImageDownload:
    type: object
    description: "New download information for a particular image variant and resolution"
    properties:
      id:
        type: string
        description: "the variant"
        example: "original"
      height:
        type: integer
        description: "Image height, in number of pixels"
        example: 1080
      type:
        type: string
        description: "Type of download corresponding to this variant"
        example: "png"
      width:
        type: integer
        description: "Image width, in number of pixels"
        example: 1920
      links:
        type: object
        properties:
          self:
            type: string
          image:
            type: string
            example: "http://localhost:10000/images/042e216a-7822-4fa0-a3d6-e3f5248ffc35"
      state:
        type: string
        description: "The state of this download variant. On creation the only allowed states are pending or importing."
        enum:
          - pending
          - importing
        example: "importing"
      import_started:
        type: string
        description: "Timestamp representation for the importing process start, formatted according to RFC3339"
        example: "2020-04-26T08:05:52Z"

securityDefinitions:

  FlorenceAPIKey:
    name: X-Florence-Token
    description: "API key used to allow florence users to create, update and query images metadata"
    in: header
    type: apiKey

  ServiceAPIKey:
    name: Authorization
    description: "API key used to allow services to update the state of an image"
    in: header
    type: apiKey

parameters:

  image_id:
    name: image_id
    description: "A unique id for an image metadata entry"
    required: true
    in: path
    type: string

  variant:
    name: variant
    description: "A unique image download variant identifier"
    required: true
    in: path
    type: string

  collection_id:
    name: collection_id
    description: "A unique id for a collection to filter on"
    in: query
    type: string

  image:
    name: image
    description: "A valid image model, which already exists"
    in: body
    required: true
    schema:
      $ref: '#/definitions/Image'

  image_download:
    name: image_download
    description: "A valid image download model, which already exists"
    in: body
    required: true
    schema:
      $ref: '#/definitions/ImageDownload'

  new_image_download:
    name: new_image_download
    description: "A valid new image download"
    in: body
    required: true
    schema:
      $ref: '#/definitions/NewImageDownload'

  new_image:
    name: new_image
    description: "A valid image model at creation time. Only a subset of the full image model will be considered."
    in: body
    required: true
    schema:
      $ref: '#/definitions/NewImage'

  