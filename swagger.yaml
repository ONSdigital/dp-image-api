swagger: "2.0"

info:
  title: "Digital Publishing Image API"
  description: "Provides read and write capabilities for image metadata"
  version: "1.0.0"
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"

basePath: "/v1"

schemes:
  - http

tags:
  - name: "image"

paths:

  /images:
    get:
      tags:
      - "image"
      summary: "Get images filtered by collection id"
      description: "Returns a list of images metadata filtered by an optional query parameter defining the collection ID"
      parameters:
      - $ref: '#/parameters/collection_id'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      responses:
        200:
          description: "A json object containing a list of images"
          schema:
            $ref: '#/definitions/Images'
        400:
          description: "Invalid request"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to view images metadata"
        500:
          $ref: '#/responses/InternalError'
    post:
      tags:
      - "image"
      summary: "Create a new image metadata entry"
      description: "Creates a new image metadata entry corresponding to the provided body in this request. A new ID will be generated for the image, and it will be set to `created` state."
      parameters:
      - $ref: '#/parameters/new_image'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      responses:
        201:
          description: "The image metadata was correctly created and a json object containing the new image information is returned. The new image will be in 'created' state and its id will be newly generated."
          schema:
            $ref: '#/definitions/Image'
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * collection id was incorrect
              * malformed body
              * provided image had an invalid parameter
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to create images metadata"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}:
    get:
      tags:
      - "image"
      summary: "Get an image metadata by its id"
      description: "Returns an image metadata whose id matches the id provided as path parameter"
      parameters:
      - $ref: '#/parameters/image_id'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      responses:
        200:
          description: "A json with the requested image metadata"
          schema:
            $ref: '#/definitions/Image'
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to view image metadata"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
    put:
      tags:
      - "image"
      summary: "Update an image metadata entry"
      description: "Updates an existing image metadata entry whose id matches the id provided as path parameter. Only the provided fields will be used to overwrite an existing image, creating them if they did not already exist, and not overwriting any field that is not provided."
      parameters:
      - $ref: '#/parameters/image_id'
      - $ref: '#/parameters/image'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      - ServiceAPIKey: []
      responses:
        200:
          description: "A json with the requested image metadata"
          schema:
            $ref: '#/definitions/Image'
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * image id in body, if provided, did not match the path parameter
              * malformed body
              * provided image had an invalid parameter
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to update image or cannot be updated because the state transition is not allowed"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}/upload:
    post:
      tags:
        - "image"
      summary: "Upload an image"
      description: "Supplies the uploaded file location and requests that the image be imported. This call sets the image state to 'uploaded'."
      parameters:
        - $ref: '#/parameters/image_id'
        - $ref: '#/parameters/upload_image'
      produces:
        - "application/json"
      security:
        - FlorenceAPIKey: []
      responses:
        200:
          description: "The image upload was successfully requested to the image importer."
        400:
          description: "Invalid request, image id was incorrect"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to upload image or it is in wrong state to be uploaded"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}/publish:
    post:
      tags:
      - "image"
      summary: "Publish an image"
      description: "Requests an image publishing via the static file publisher, which puts the S3 objects for this image to the static bucket. This call sets the image state to 'publishing'."
      parameters:
      - $ref: '#/parameters/image_id'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      responses:
        200:
          description: "The image publishing was successfully requested to Static file publisher."
        400:
          description: "Invalid request, image id was incorrect"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to publish image or it is in wrong state to be published"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /images/{image_id}/downloads/{variant}:
    put:
      tags:
      - "image"
      summary: "Update an image download variant"
      description: "Update the image download fields for the provided variant of the provided image."
      parameters:
      - $ref: '#/parameters/image_id'
      - $ref: '#/parameters/variant'
      - $ref: '#/parameters/update_download'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      - ServiceAPIKey: []
      responses:
        200:
          description: "A json with the download varint afeter veing updated"
          schema:
            $ref: '#/definitions/ImageDownload'
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * malformed body
              * provided download variant had an invalid parameter
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to update image download variant or cannot be updated because the state of the image does not allow it to be updated"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'


  /images/{image_id}/downloads/{variant}/import:
    post:
      tags:
      - "image"
      summary: "Import an image download variant"
      description: "Update an image download variant state to 'importing' state, just before the variant is generated."
      parameters:
      - $ref: '#/parameters/image_id'
      - $ref: '#/parameters/variant'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      responses:
        200:
          description: "The image download variant was successfully updated to 'importing' state."
        400:
          description: "Invalid request"
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to import image download variant or the image or download variant is in wrong state to be imported"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
  
  /images/{image_id}/downloads/{variant}/complete:
    post:
      tags:
      - "image"
      summary: "Complete an image download variant"
      description: "Update an image download variant to 'completed' state. If all download variants have been completed, the high level image state will also be updated to 'completed'. If any download variant failed to publish, the high level image state will be updated to 'failed_publish'."
      parameters:
      - $ref: '#/parameters/image_id'
      - $ref: '#/parameters/variant'
      produces:
      - "application/json"
      security:
      - FlorenceAPIKey: []
      responses:
        200:
          description: "The image download variant was successfully updated to 'completed' state."
        401:
          $ref: '#/responses/Unauthenticated'
        403:
          description: "Unauthorised to complete image download variant or the image or download variant is in wrong state to be completed"
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

responses:

  InternalError:
    description: "Failed to process the request due to an internal error"
    
  NotFound:
    description: "Requested item cannot be found"
    
  InvalidRequestError:
    description: "Failed to process the request due to invalid request"

  Unauthenticated:
    description: "User or service is not authenticated"

definitions:

  Images:
    description: "A list of images"
    type: object
    properties:
      count:
        description: "The number of images returned"
        readOnly: true
        type: integer
        example: 1
      items:
        type: array
        items:
          $ref: '#/definitions/Image'
      limit:
        description: "The number of images requested"
        type: integer
      offset:
        description: "The first row of images to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the limit parameter"
        type: integer
      total_count:
        description: "The total number of images"
        readOnly: true
        type: integer
        example: 1

  NewImage:
    type: object
    description: "New Image metadata model, used to create new images. The image ID will be created by image API, and the state will be set to 'created' at creation time."
    required:
      - "collection_id"
    properties:
      collection_id:
        type: string
        description: "Collection unique identifier corresponding to this image"
        example: "5557dcd9-bf58-4a67-94f7-2343569834cc"
      filename:
        type: string
        description: "Image's file name. According to SEO recommendations, the name should not be longer than 5 words. And it should not include extension because multiple extensions for the same image might be available as download variants."
        example: "image-name"
        maxLength: 40
      license:
        type: object
        description: "License that defines the third party permissions for this image"
        properties:
          title:
            type: string
            description: "Title of the license"
            example: "Open Government Licence v3.0"
          href: 
            type: string
            description: "Link to the license content"
            example: "https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
      type:
        type: string
        description: "Type of image, which might define a set of possible formats and variants or resolutions that will be generated by the image importer."
        example: "chart"

  ImageUpload:
    type: object
    description: "Original file upload in the upload bucket"
    properties:
      path:
        type: string
        description: "S3 object key (without bucket name) where the originally uploaded image is stored"
        example: "images/025a789c-533f-4ecf-a83b-65412b96b2b7/image-name.png"

  Image:
    type: object
    description: "Existing Image metadata model"
    properties:
      id:
        type: string
        description: "Image metadata unique identifier"
        example: "042e216a-7822-4fa0-a3d6-e3f5248ffc35"
      collection_id:
        type: string
        description: "Collection unique identifier corresponding to this image"
        example: "5557dcd9-bf58-4a67-94f7-2343569834cc"
      state:
        type: string
        enum:
          - created
          - uploaded
          - importing
          - imported
          - published
          - completed
          - deleted
          - failed_import
          - failed_publish
        description: "The state of the image"
        example: "published"
      filename:
        type: string
        description: "Image's file name. According to SEO recommendations, the name should not be longer than 5 words. And it should not include extension because multiple extensions for the same image might be available as download variants."
        example: "image-name"
        maxLength: 40
      license:
        type: object
        description: "License that defines the third party permissions for this image"
        properties:
          title:
            type: string
            description: "Title of the license"
            example: "Open Government Licence v3.0"
          href: 
            type: string
            description: "Link to the license content"
            example: "https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
      upload:
        $ref: '#/definitions/ImageUpload'
      type:
        type: string
        description: "Type of image, which might define a set of possible formats and variants or resolutions."
        example: "chart"
      downloads:
        type: object
        description: "All available variants for this image. Note that this spec is not a comprehensive list of cases; it only shows a few examples of possible image variant keys."
        properties:
          original:
            $ref: '#/definitions/ImageDownload'
          png:
            $ref: '#/definitions/ImageDownload'
          svg:
            $ref: '#/definitions/ImageDownload'
          png_w500:
            $ref: '#/definitions/ImageDownload'
          svg_w500:
            $ref: '#/definitions/ImageDownload'
          png_bw:
            $ref: '#/definitions/ImageDownload'
          png_w500_bw:
            $ref: '#/definitions/ImageDownload'

  ImageDownload:
    type: object
    description: "Download information for a particular image variant and resolution"
    properties:
      size:
        type: integer
        description: "File size in number of bytes"
        example: 1024000
      type:
        type: string
        description: "Type of download corresponding to this variant"
        example: "png"
      width:
        type: integer
        description: "Image width, in number of pixels"
        example: 1920
      height:
        type: integer
        description: "Image height, in number of pixels"
        example: 1080
      public:
        type: boolean
        description: "Determines if this image variant is public (i.e. it can be accessed under static.ons.gov.uk)"
        example: true
      href:
        type: string
        description: "Full URL pointing to the image in download service"
        example: "http://download.ons.gov.uk/images/042e216a-7822-4fa0-a3d6-e3f5248ffc35/image-name.png"
      private:
        type: string
        description: "S3 Private bucket name"
        example: "my-private-bucket"
      state:
        type: string
        description: "The state of this download variant. The high level image will change its state to imported only when all variants are in imported state."
        enum:
          - pending
          - importing
          - imported
          - published
          - completed
          - failed
        example: "published"
      error:
        type: string
        description: "Any error information, if there was an error with this image variant"
        example: "import process failed"
      import_started:
        type: string
        description: "Timestamp representation for the importing process start, formatted according to RFC3339"
        example: "2020-04-26T08:05:52Z"
      import_completed:
        type: string
        description: "Timestamp representation for the importing process completion, formatted according to RFC3339"
        example: "2020-04-26T08:07:32+00:00"
      publish_started:
        type: string
        description: "Timestamp representation for the publishing process start, formatted according to RFC3339"
        example: "2020-04-26T09:51:03-00:00"
      publish_completed:
        type: string
        description: "Timestamp representation for the publishing process completion, formatted according to RFC3339"
        example: "2020-04-26T10:01:28Z"
        
  ImageDownloadUpdate:
    type: object
    description: "Subset of ImageDownload variant that can be updated by a caller"
    properties:
      size:
        type: integer
        description: "File size in number of bytes"
        example: 1024000
      type:
        type: string
        description: "Type of download corresponding to this variant"
        example: "png"
      width:
        type: integer
        description: "Image width, in number of pixels"
        example: 1920
      height:
        type: integer
        description: "Image height, in number of pixels"
        example: 1080
      private:
        type: string
        description: "S3 Private bucket name"
        example: "my-private-bucket"

securityDefinitions:

  FlorenceAPIKey:
    name: X-Florence-Token
    description: "API key used to allow florence users to create, update and query images metadata"
    in: header
    type: apiKey

  ServiceAPIKey:
    name: Authorization
    description: "API key used to allow services to update the state of an image"
    in: header
    type: apiKey

parameters:

  image_id:
    name: image_id
    description: "A unique id for an image metadata entry"
    required: true
    in: path
    type: string
  
  variant:
    name: variant
    description: "A unique image download variant identifier"
    required: true
    in: path
    type: string
    
  collection_id:
    name: collection_id
    description: "A unique id for a collection to filter on"
    in: query
    type: string
    
  image:
    name: image
    description: "A valid image model, which already exists"
    in: body
    required: true
    schema:
      $ref: '#/definitions/Image'

  new_image:
    name: new_image
    description: "A valid image model at creation time. Only a subset of the full image model will be considered."
    in: body
    required: true
    schema:
      $ref: '#/definitions/NewImage'

  upload_image:
    name: upload_image
    description: "A valid upload model containing the path of the uploaded image."
    in: body
    required: true
    schema:
      $ref: '#/definitions/ImageUpload'

  update_download:
    name: update_download
    description: "A subset of the download data model, containing only the fields that can be updated by an API caller."
    in: body
    required: true
    schema:
      $ref: '#/definitions/ImageDownloadUpdate'
  